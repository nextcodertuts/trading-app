datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  hashedPassword     String
  name               String?
  role               Role                @default(TRADER)
  balance            Float               @default(0)
  orders             Order[]
  walletTransactions WalletTransaction[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sessions           Session[]
  adminLogs          AdminLog[]          // Admin logs (for admins only)
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  expiresAt   DateTime
  ipAddress   String?  // For tracking IP address
  deviceInfo  String?  // For tracking device details (optional)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  symbolId    Int      // Relation to the Symbol being traded
  symbol      Symbol   @relation(fields: [symbolId], references: [id])
  amount      Float
  direction   String   // "up" or "down"
  entryPrice  Float    // Price when the order was placed
  exitPrice   Float?   // Price at the expiration of the order
  outcome     String?  // "win", "loss", or null if pending
  expiresAt   DateTime // Time when the binary option expires
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WalletTransaction {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // "deposit" or "withdrawal"
  amount      Float
  status      String   // "pending", "approved", "rejected"
  reference   String?  // Optional transaction reference ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Symbol {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Symbol name (e.g., BTC/USD, EUR/USD)
  currentPrice Float   // Current market price
  payout      Float    @default(80) // Payout percentage for winning trades
  enabled     Boolean  @default(true) // Enable or disable trading for this symbol
  trend       String?  // Current trend (e.g., "up", "down", "volatile")
  volatility  Float    @default(1.0) // Volatility factor to simulate price changes
  status      String   @default("active") // Symbol status: active, paused, or inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]  // Relation to orders placed on this symbol
}


model AdminLog {
  id          Int      @id @default(autoincrement())
  adminId     String
  admin       User     @relation(fields: [adminId], references: [id])
  action      String   // Description of the admin action
  details     String?  // Additional details (e.g., JSON payload)
  createdAt   DateTime @default(now())
}

enum Role {
  TRADER
  ADMIN
}
