datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  hashedPassword     String
  name               String?
  role               Role                @default(TRADER)
  balance            Float               @default(0)
  orders             Order[]
  walletTransactions WalletTransaction[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sessions           Session[]
  adminLogs          AdminLog[]
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  expiresAt   DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  symbolId    Int
  symbol      Symbol   @relation(fields: [symbolId], references: [id])
  amount      Float
  direction   String   // "up" or "down"
  entryPrice  Float    // Original price when order was placed
  exitPrice   Float?   // Price at expiration
  manipulatedEntryPrice Float // Manipulated price when order was placed
  manipulatedExitPrice Float? // Manipulated price at expiration
  outcome     String?  // "win", "loss", or null if pending
  expiresAt   DateTime // Time when the binary option expires
  duration    Int      // Duration in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profitLoss  Float?   // Calculated profit/loss amount
  payout      Float    // Payout percentage for this trade
}

model WalletTransaction {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // "deposit" or "withdrawal"
  amount      Float
  status      String   // "pending", "approved", "rejected"
  reference   String?  // Optional transaction reference ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Symbol {
  id                Int      @id @default(autoincrement())
  name              String   @unique // e.g., "BTCUSDT"
  displayName       String   // e.g., "BTC/USDT"
  currentPrice      Float    // Current market price from Binance
  manipulatedPrice  Float    // Manipulated price for trading
  payout           Float    @default(80) // Payout percentage
  enabled          Boolean  @default(true)
  minAmount        Float    @default(10) // Minimum trade amount
  maxAmount        Float    @default(1000) // Maximum trade amount
  manipulationConfig Json    // Configuration for price manipulation
  binanceSymbol    String   // Symbol as used on Binance
  trend            String?  // "up", "down", or "sideways"
  volatility       Float    @default(1.0) // Volatility factor
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Order[]
}

model AdminLog {
  id          Int      @id @default(autoincrement())
  adminId     String
  admin       User     @relation(fields: [adminId], references: [id])
  action      String
  details     String?
  createdAt   DateTime @default(now())
}

enum Role {
  TRADER
  ADMIN
}